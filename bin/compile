#!/bin/bash
# Usage: bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail

# START CONFIG
NGINX_VERSION=1.3.11
PHP_VERSION=5.4.11
WORDPRESS_VERSION=3.5.1
S3_BUCKET=heroku-buildpack-wordpress
# END CONFIG

#
NGINX_URL="https://s3.amazonaws.com/${S3_BUCKET}/nginx-${NGINX_VERSION}-heroku.tar.gz"
PHP_URL="https://s3.amazonaws.com/${S3_BUCKET}/php-${PHP_VERSION}-with-fpm-heroku.tar.gz"
WORDPRESS_URL="http://wordpress.org/wordpress-${WORDPRESS_VERSION}.tar.gz"
#

# parse and derive params
BUILDPACK_DIR=$(cd $(dirname $0); cd ..; pwd) # absolute path of buildpack
BUILD_DIR=$1
CACHE_DIR=$2

echo "-----> compile params: BUILDPACK_DIR: $BUILDPACK_DIR BUILD_DIR: $BUILD_DIR CACHE_DIR:$CACHE_DIR"

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

cd ${BUILD_DIR}
echo "-----> Installing Nginx v${NGINX_VERSION}"
if [ ! -d ./runtimes/nginx ]; then
  mkdir -p ./runtimes/nginx && cd ./runtimes/nginx
  curl --silent --max-time 60 --location $NGINX_URL | tar xz
fi

cd ${BUILD_DIR}
echo "-----> Installing Wordpress v${WORDPRESS_VERSION}"
if [ ! -d ./public/wordpress ]; then
  cd ./public/
  curl --silent --max-time 60 --location $WORDPRESS_URL | tar xz
  echo "Patching WordPress source to make it HipHop compliant" | indent
  sed --in-place --expression \
    "s|define( 'OBJECT', 'OBJECT', true );|define('OBJECT', 'OBJECT'); define('Object', 'OBJECT'); define('object', 'OBJECT');|g" \
    wordpress/wp-includes/wp-db.php
  echo "<?php define('WP_USE_THEMES', true); require('./wordpress/wp-blog-header.php');" > index.php
fi

echo "-----> Copying config templates"
cp -Rf ${BUILDPACK_DIR}/config ${BUILD_DIR} | indent

echo "-----> Creating bin/ scripts"
mkdir -p ${BUILD_DIR}/bin
cd ${BUILD_DIR}

# Setup
echo "Writing setup.sh script" | indent
cat >bin/setup.sh <<EOF
#!/usr/bin/env bash

BASE_DIR=\$(cd \$(dirname \$0); cd ..; pwd) # absolute path
export BASE_DIR

cd \$BASE_DIR
mkdir -p run/nginx_cache

echo "-----> Writing config files..."
erb config/nginx/nginx.conf.erb > runtimes/nginx/conf/nginx.conf
erb config/nginx/wordpress.conf.erb > runtimes/nginx/conf/wordpress.conf
erb config/hiphop/hhvm.hdf.erb > run/hhvm.hdf
erb config/wordpress/wp-config.php.erb > public/wp-config.php

chmod 755 public/wp-content

# Expose Heroku config vars to PHP-FPM processes
#for var in \`env | cut -f1 -d=\`; do
#  echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
#done

mkdir -p logs
#touch logs/access.log logs/error.log 
EOF
chmod +x bin/setup.sh

# Cron job
echo "Writing cron.sh script" | indent
cat >bin/cron.sh <<EOF
#!/usr/bin/env bash

setup.sh && cd public && php wp-cron.php
EOF
chmod +x bin/cron.sh

# Startup
echo "Writing start.sh script" | indent
cat >bin/start.sh <<EOF
#!/usr/bin/env bash
HELP="bin/start {port} {loglevel}"
if [[ -n "\$1" ]]; then
  export PORT=\$1
else
  echo \$HELP
  exit 1
fi
if [[ -n "\$2" ]]; then
  export LOGLEVEL=\$2
else
  LOGLEVEL="Error"
fi

BASE_DIR=\$(cd \$(dirname \$0); cd ..; pwd) # absolute path
echo "-----> BASE_DIR: \$BASE_DIR"
cd \$BASE_DIR

bin/setup.sh

echo "-----> Using LOGLEVEL: \$LOGLEVEL [options: None | Error (default) | Warning | Info | Verbose ]"
killall -q tail 
(tail -qF -n 0 logs/*.log &)

echo "-----> Starting hiphop"
#runtimes/hiphop/bin/hhvm --mode server --config \$BASE_DIR/run/hhvm.hdf
hhvm --mode server --config \$BASE_DIR/run/hhvm.hdf

#echo "-----> Starting nginx to listen on port \$PORT"
#nginx -c \$BASE_DIR/runtimes/nginx/conf/nginx.conf -p \$BASE_DIR

echo "-----> Cleanup"
killall -q tail
EOF
chmod +x bin/start.sh

echo "-----> Done with compile"
